Background The PM Internship Scheme receives applications from youth across India, including rural areas, tribal districts, urban slums, and remote colleges. Many of these candidates are first-generation learners with limited digital exposure and no prior internship experience. With hundreds of internships listed on the portal, it becomes difficult for such candidates to identify which ones match their skills, interests, or aspirations. This leads to misaligned applications and missed opportunities. Description The problem seeks to build a simple, lightweight AI-based recommendation engine that suggests the most relevant internships to each candidate based on their profile, academic background, interests, and location preferences. The system should be user-friendly, mobile-compatible, and work well even for users with low digital literacy. It should offer 3-5 personalized suggestions, instead of a long list, and help candidates make informed choices. The tool must be simple enough to be integrated with the existing PM Internship Scheme portal and must avoid complex or resource-intensive deployment. Expected Solution A functional prototype that: • Captures basic candidate inputs (education, skills, sector interests, location) • Uses a rule-based or ML-light model to suggest 3-5 top internships • Has a simple, intuitive UI with minimal text and visual cues • Can be accessed on mobile devices and adapted to regional language use • Outputs recommendations in a clear, user-friendly format (e.g., cards or simple list). Perfect 👍 — let’s walk through exactly how you can **implement the hybrid approach step by step** for your Smart India Hackathon project.

---

## 🛠 Step 1: Collect & Structure Data
* ""IMPORTANT: use the entire dataset internships_filtered.csv.
* Store internship listings in a structured format (DB or JSON).
* Each internship should have **metadata**:

  * `title`
  * `sector` (e.g., IT, Healthcare, Education)
  * `skills_required`
  * `education_level` (UG/PG/any) (Not mentioned in internships_filtered.csv dataset, use Gemini)
  * `location` (city/state/remote)# sih 
  * `description` (short text)

📌 For hackathon, you can use a **static dataset (JSON/CSV)** instead of a full DB.

---

## 🛠 Step 2: Candidate Input Form (Frontend)

* Candidate fills a simple form:

  * Education
  * Skills (create a dropdown + search option for the skills a candidate has from unique_skills.csv)
  * Sector interests (dropdown) (Since it is absent as a column in the dataset, use Gemini API to get this resolved)
  * Location preference (create a dropdown + search option for the locations with Remote option a candidate requires from unique_locations.csv)
  * For preferred languagues in internships, use the languages mentioned as proficiency or spoken in unique_skills.csv (dropdown + search)
👉 Keep it **mobile-first, minimal text, icons if possible**.

---

## 🛠 Step 3: Rule-Based Filtering (Backend)
	Use the entire internships_filtered.csv dataset.
1. Match internships where:

   * Candidate education level ≥ required level.
   * At least one skill overlaps.
   * Location matches OR internship allows remote.
   * Sector matches candidate’s interest.

2. After filtering, you’ll typically reduce **all available → 20–30 relevant internships**.

🔹 Example (Python pseudo-logic):

```pseudocode
filtered = []
for internship in all_internships:
    if internship.education_level <= candidate.education AND
       overlap(internship.skills_required, candidate.skills) AND
       (internship.location == candidate.location OR internship.remote) AND
       internship.sector == candidate.sector_interest:
        filtered.append(internship)
```

---

## 🛠 Step 4: AI Ranking with Gemini

Now take the **filtered list** and ask Gemini (or any LLM API) to **rank and explain**.
Add the Gemini API key to a .env file. Rank the internships based on the highest number of skills matched and preferred location. Show a percentage match on top of each suggestions.
### Example Prompt

```
Candidate Profile:
Education: B.Sc. Computer Science
Skills: Python, Data Analysis, SQL
Sector Interest: IT
Location Preference: Bihar or Remote

Internships (shortlisted):
1. Data Analyst Intern - Delhi - Skills: SQL, Excel
2. Web Development Intern - Remote - Skills: HTML, CSS, JS, Python
3. AI Research Intern - Bangalore - Skills: Python, ML, Statistics
4. Government Data Digitization Intern - Patna - Skills: MS Office, Python
5. Backend Developer Intern - Remote - Skills: Node.js, SQL

Task:
From the above internships, recommend the top 3 most suitable for this candidate.
For each, output in the following format:
- Title
- Location
- Why this fits (1–2 sentences, simple language)
```

### Expected Output

```
1. Web Development Intern - Remote  
   Fits because you already know Python and can easily pick up web technologies.  
   
2. AI Research Intern - Bangalore  
   Uses your Python and data analysis skills, and aligns with your interest in IT.  

3. Government Data Digitization Intern - Patna  
   Close to your location, requires Python skills, and gives exposure to public sector projects.
```

---

## 🛠 Step 5: Display Recommendations (Frontend)

* Show **3–5 cards** (not a big list):

  * Internship Title
  * Location
  * Short “Why it fits you” explanation (from Gemini).
* Add **apply button/link** directly to PM Internship Scheme portal.

---

## 🛠 Step 6: Multilingual Support
* Option to change the language to some other translated english language (say, Hindi)
* Use Google Translate API (or Gemini itself) to **translate recommendations** into the user’s regional language.
* Provide a simple **language toggle button**.

---

## ⚡ Tech Stack Suggestion

* **Frontend**: React.js / Flutter (mobile-first, simple UI).
* **Backend**: Node.js (Express) or Python (Flask/FastAPI).
* **Database**: JSON/CSV for hackathon → can later extend to MySQL/PostgreSQL.
* **AI**: Gemini API for ranking + explanation.
* **Deployment**: Lightweight hosting (Render, Vercel, or Railway).

---

## 📊 Architecture (High-Level Flow)

1. Candidate → fills form → frontend sends data to backend.
2. Backend → filters internships (rule-based).
3. Backend → sends filtered list + candidate profile to Gemini API.
4. Gemini → returns top 3–5 ranked recommendations.
5. Backend → returns response to frontend.
6. Frontend → displays in card format (with translation option).

---

✅ This way:

* Heavy lifting (ranking, explanation, language handling) is done by Gemini.
* Rule-based filtering ensures system stays **lightweight, fast, and scalable**.
* You don’t need to train a model → saves time and complexity.